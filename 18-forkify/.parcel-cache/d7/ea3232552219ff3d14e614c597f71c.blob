"use strict";

require("core-js/modules/web.immediate.js");

var model = _interopRequireWildcard(require("./model.js"));

var _recipeView = _interopRequireDefault(require("./js/views/recipeView"));

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// AMN - We import all the exported in model.js
// AMN - In parcel we can import images and we do it to get the icons.
// AMN - Polyfilling async/await
const recipeContainer = document.querySelector('.recipe');

const timeout = function (s) {
  return new Promise(function (_, reject) {
    setTimeout(function () {
      reject(new Error(`Request took too long! Timeout after ${s} second`));
    }, s * 1000);
  });
}; // https://forkify-api.herokuapp.com/v2
///////////////////////////////////////


const messageClass = document.querySelector('div > div.message'); // AMN - We prepare the HTML code to render the recipe gotten. 

function renderRecipe(recipe) {
  let ingredientsList = ""; // AMN - another option is to use a map instead of each

  recipe.ingredients.forEach(ingredient => {
    ingredientsList += `
        <li class="recipe__ingredient">
          <svg class="recipe__icon">
            <use href="${_icons.default}#icon-check"></use>
          </svg>
          <div class="recipe__quantity">${ingredient.quantity !== null ? ingredient.quantity : ''}</div>
          <div class="recipe__description">
            <span class="recipe__unit">${ingredient.unit}</span>
            ${ingredient.description}
          </div>
        </li>
      `;
  });
  const theRecipe = `
    <figure class="recipe__fig">
      <img src="${recipe.image}" alt="Recipe image" class="recipe__img" />
      <h1 class="recipe__title">
        <span>${recipe.title}</span>
      </h1>
    </figure>

    <div class="recipe__details">
      <div class="recipe__info">
        <svg class="recipe__info-icon">
          <use href="${_icons.default}#icon-clock"></use>
        </svg>
        <span class="recipe__info-data recipe__info-data--minutes">${recipe.cookingTime}</span>
        <span class="recipe__info-text">minutes</span>
      </div>
      <div class="recipe__info">
        <svg class="recipe__info-icon">
          <use href="${_icons.default}#icon-users"></use>
        </svg>
        <span class="recipe__info-data recipe__info-data--people">${recipe.servings}</span>
        <span class="recipe__info-text">servings</span>

        <div class="recipe__info-buttons">
          <button class="btn--tiny btn--increase-servings">
            <svg>
              <use href="${_icons.default}#icon-minus-circle"></use>
            </svg>
          </button>
          <button class="btn--tiny btn--increase-servings">
            <svg>
              <use href="${_icons.default}#icon-plus-circle"></use>
            </svg>
          </button>
        </div>
      </div>

      <div class="recipe__user-generated">
        <svg>
          <use href="${_icons.default}#icon-user"></use>
        </svg>
      </div>
      <button class="btn--round">
        <svg class="">
          <use href="${_icons.default}#icon-bookmark-fill"></use>
        </svg>
      </button>
    </div>

    <div class="recipe__ingredients">
      <h2 class="heading--2">Recipe ingredients</h2>
      <ul class="recipe__ingredient-list">
        ${ingredientsList}
      </ul>
    </div>

    <div class="recipe__directions">
      <h2 class="heading--2">How to cook it</h2>
      <p class="recipe__directions-text">
        This recipe was carefully designed and tested by
        <span class="recipe__publisher">${recipe.publisher}</span>. Please check out
        directions at their website.
      </p>
      <a
        class="btn--small recipe__btn"
        href="${recipe.sourceUrl}"
        target="_blank"
      >
        <span>Directions</span>
        <svg class="search__icon">
          <use href="${_icons.default}#icon-arrow-right"></use>
        </svg>
      </a>
    </div>
  `;
  console.log(theRecipe);
  return theRecipe;
} // AMN - Meanwhile we wait for taking back the recipe from the API we launch an spinner.


const spinner = `
  <div class="spinner">
    <svg>
      <use href="${_icons.default}#icon-loader"></use>
    </svg>
  </div>
`; // AMN - In case we don't found recipes we render an error.

const noRecipesErr = `
  <div class="error">
    <div>
      <svg>
        <use href="${_icons.default}#icon-alert-triangle"></use>
      </svg>
    </div>
    <p>No recipes found for your query. Please try again!</p>
  </div>
`; // AMN - We get a recipe from the API by its id accordingly with API documentation (https://forkify-api.herokuapp.com/v2) 

const theRecipe = async function () {
  try {
    const id = window.location.hash.slice(1); // AMN location is the entire url

    if (!id) return; // AMN - Guard clause just in case we don't have any id.
    // AMN - we load the recipe

    await model.loadRecipe(id);
    spinnerClass.remove(); // AMN - we render the recipe 

    _recipeView.default.render(model.state.recipe);

    recipeContainer.insertAdjacentHTML('afterbegin', renderRecipe(recipe));
  } catch (error) {
    alert(error);
  }
};

messageClass.remove(); // AMN - another option is to use innerHTML = '';

recipeContainer.insertAdjacentHTML('afterbegin', spinner);
const spinnerClass = document.querySelector('.spinner'); //AMN - Listening hash change on url to load a new recipe or simple the loading page first time
//window.addEventListener("hashchange", theRecipe); // AMN - change on url hast
//window.addEventListener("load", theRecipe); // AMN - first time the page loads (no hash change yet)
// AMN - this is a way of doing the same that above but once (think about having a lot of events to listen to)

['hashchange', 'load'].forEach(event => window.addEventListener(event, theRecipe)); //theRecipe('https://forkify-api.herokuapp.com/api/v2/recipes/5ed6604591c37cdc054bc886');
//theRecipe('https://forkify-api.herokuapp.com/api/v2/recipes/5ed6604591c37cdc054bc90b');